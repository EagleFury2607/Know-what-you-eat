exports[`Login Component Unit Test Login component loads 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(NavbarComponent)
          userLogginStatus="Register" />,
        <form
          className="text-center Login.loginClass form-signin"
          id="custom-form"
          onSubmit={[Function]}>
          <h1
                    className="h3 mb-3 font-weight-normal">
                    Please sign in
          </h1>
          <input
                    autoFocus={true}
                    className="form-control"
                    name="username"
                    onChange={[Function]}
                    placeholder="Email address"
                    required={true}
                    type="email"
                    value="" />
          <input
                    className="form-control"
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    required={true}
                    type="password"
                    value="" />
          <button
                    className="btn btn-lg btn-primary btn-block"
                    type="submit">
                    Submit
          </button>
</form>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "userLogginStatus": "Register",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="h3 mb-3 font-weight-normal">
              Please sign in
</h1>,
            <input
              autoFocus={true}
              className="form-control"
              name="username"
              onChange={[Function]}
              placeholder="Email address"
              required={true}
              type="email"
              value="" />,
            <input
              className="form-control"
              name="password"
              onChange={[Function]}
              placeholder="password"
              required={true}
              type="password"
              value="" />,
            <button
              className="btn btn-lg btn-primary btn-block"
              type="submit">
              Submit
</button>,
          ],
          "className": "text-center Login.loginClass form-signin",
          "id": "custom-form",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Please sign in",
              "className": "h3 mb-3 font-weight-normal",
            },
            "ref": null,
            "rendered": "Please sign in",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "autoFocus": true,
              "className": "form-control",
              "name": "username",
              "onChange": [Function],
              "placeholder": "Email address",
              "required": true,
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "form-control",
              "name": "password",
              "onChange": [Function],
              "placeholder": "password",
              "required": true,
              "type": "password",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Submit",
              "className": "btn btn-lg btn-primary btn-block",
              "type": "submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": "button",
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(NavbarComponent)
            userLogginStatus="Register" />,
          <form
            className="text-center Login.loginClass form-signin"
            id="custom-form"
            onSubmit={[Function]}>
            <h1
                        className="h3 mb-3 font-weight-normal">
                        Please sign in
            </h1>
            <input
                        autoFocus={true}
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Email address"
                        required={true}
                        type="email"
                        value="" />
            <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="password"
                        required={true}
                        type="password"
                        value="" />
            <button
                        className="btn btn-lg btn-primary btn-block"
                        type="submit">
                        Submit
            </button>
</form>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "userLogginStatus": "Register",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="h3 mb-3 font-weight-normal">
                Please sign in
</h1>,
              <input
                autoFocus={true}
                className="form-control"
                name="username"
                onChange={[Function]}
                placeholder="Email address"
                required={true}
                type="email"
                value="" />,
              <input
                className="form-control"
                name="password"
                onChange={[Function]}
                placeholder="password"
                required={true}
                type="password"
                value="" />,
              <button
                className="btn btn-lg btn-primary btn-block"
                type="submit">
                Submit
</button>,
            ],
            "className": "text-center Login.loginClass form-signin",
            "id": "custom-form",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Please sign in",
                "className": "h3 mb-3 font-weight-normal",
              },
              "ref": null,
              "rendered": "Please sign in",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoFocus": true,
                "className": "form-control",
                "name": "username",
                "onChange": [Function],
                "placeholder": "Email address",
                "required": true,
                "type": "email",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "form-control",
                "name": "password",
                "onChange": [Function],
                "placeholder": "password",
                "required": true,
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Submit",
                "className": "btn btn-lg btn-primary btn-block",
                "type": "submit",
              },
              "ref": null,
              "rendered": "Submit",
              "type": "button",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
